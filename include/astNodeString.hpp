/**
 * @file
 * Declare the Tang::AstNodeString class.
 */

#ifndef TANG_ASTNODESTRING_HPP
#define TANG_ASTNODESTRING_HPP

#include "astNode.hpp"

namespace Tang {
  /**
   * An AstNode that represents a string literal.
   */
  class AstNodeString : public AstNode {
  public:
    /**
     * Construct a Trusted string.
     *
     * @param text The string to represent.
     * @param location The location associated with the expression.
     */
    AstNodeString(const std::string & text, Tang::location location);

    /**
     * Construct a string that is either Trusted or Untrusted.
     *
     * @param text The string to represent.
     * @param isTrusted Whether or not the string literal is trusted.
     * @param location The location associated with the expression.
     */
    AstNodeString(const std::string & text, bool isTrusted, Tang::location location);

    virtual std::string dump(std::string indent = "") const override;
    virtual void compile(Tang::Program & program) const override;
    virtual void compilePreprocess(Program & program, PreprocessState state) const override;

    /**
     * Compile the string and push it onto the stack.
     *
     * @param program The Program which will hold the generated Bytecode.
     */
    void compileLiteral(Tang::Program & program) const;

  private:
    /**
     * The string value being stored.
     */
    std::string val;

    /**
     * Whether or not the string is trusted.
     */
    bool isTrusted;
  };
}

#endif // TANG_ASTNODESTRING_HPP

